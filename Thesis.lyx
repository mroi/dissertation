#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass tufte-book
\begin_preamble
% letter spacing for capitalized text
\renewcommand{\allcapsspacing}[1]{{\addfontfeature{LetterSpace=6.5}#1}}
\renewcommand{\smallcapsspacing}[1]{{\addfontfeature{LetterSpace=5.0,Letters=SmallCaps}#1}}

% font setup: because we want to set the math font also, we cannot use LyX’s font options
\usepackage[MnSymbol]{mathspec}
\setmainfont[Mapping=tex-text,ItalicFeatures={Contextuals={NoLineInitial,NoLineFinal}}]{Hoefler Text}
\setsansfont[Mapping=tex-text]{Gill Sans}
\setmonofont[Scale=0.85]{Menlo Regular}
\setmathsfont(Digits,Latin)[ItalicFeatures={Contextuals={NoLineInitial,NoLineFinal}},Numbers=Lining]{Hoefler Text}
%\setmathsfont(Greek){Georgia}

% use all-bullets for itemize and give them the right size and height
\AtBeginDocument{
\def\labelitemi{\raisebox{0.3mm}{\scriptsize\(\bullet\)}}
\def\labelitemii{\raisebox{0.3mm}{\scriptsize\(\bullet\)}}
\def\labelitemiii{\raisebox{0.3mm}{\scriptsize\(\bullet\)}}
\def\labelitemiv{\raisebox{0.3mm}{\scriptsize\(\bullet\)}}
}

% simplified title and author for fancy headers, height-correct the dash
\renewcommand{\plaintitle}{Practical Real\raisebox{-0.45mm}{-}Time}
\renewcommand{\plainauthor}{Michael Roitzsch}

% enable colored page edge when a new chapter starts
\newcommand{\chapteredge}{
\fancypagestyle{plain}{
\fancyhf{}
\fancyfoot[LE,RO]{
\begin{picture}(0,0)
\color{gray}
\put(49,-60){\rule{10mm}{305mm}}
\end{picture}
}}}

% epigraph command
\newcommand{\epigraph}[2]{
\begin{fullwidth}
\sffamily\large
\begin{doublespace}
\noindent\allcaps{#1}\\% epigraph
\noindent\allcaps{#2}% author
\end{doublespace}
\end{fullwidth}
}
\end_preamble
\options a4paper
\use_default_options true
\begin_modules
fixltx2e
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Style Verleger
Margin	Static
LatexType	Command
Category	FrontMatter
LatexName	publisher
InTitle	1
InPreamble	1
Font
Size	Large
EndFont
End

InsetLayout Flex:AllCaps
CopyStyle AllCaps
End

InsetLayout Flex:SmallCaps
CopyStyle SmallCaps
End
\end_local_layout
\language english
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "unicode=false, linktoc=all, pdfborder=2 2 0.5, linkbordercolor=0.8 0.8 1, urlbordercolor=0.6 1 0.6"
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Itemize
Greek letters in math mode are still typeset in computer modern.
 Enabling Georgia as a replacement (see preamble section in document settings)
 hangs 
\family typewriter
xelatex
\family default
.
\end_layout

\begin_layout Itemize
I might want to reset footnote numbers with each new chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
epigraph{For I dipt into the future, far as human eye could see,
\backslash
newline
\backslash
noindent saw the vision of the world, and all the wonder that would be.}{Alfred
 Lord Tennyson}
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
This first epigraph feels the most out-of-place of the three.
 Can we find something more software- or technology-related?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
epigraph{The art of prophecy is very difficult,
\backslash
newline
\backslash
noindent especially with respect to the future.}{Mark Twain}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
epigraph{Oh dear! Oh dear! I shall be too late!}{The White Rabbit}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Author
Michael Roitzsch – born August 15, 1980
\end_layout

\begin_layout Title
Practical Real
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
raisebox{0.8mm}{-}
\end_layout

\end_inset

Time:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

System Support for
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

Modern Applications
\end_layout

\begin_layout Verleger
Dissertation
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset

Advisor: Prof.
 Dr.
 rer.
 nat.
 Hermann Härtig
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset


\lang ngerman
Technische Universität Dresden
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset


\begin_inset Graphics
	filename Figures/TU-Logo.pdf
	width 5cm

\end_inset


\end_layout

\begin_layout Full Width

\lang ngerman
\begin_inset Flex NewThought
status collapsed

\begin_layout Plain Layout

\lang ngerman
Dissertation
\end_layout

\end_inset

 zur Erlangung des akademischen Grades 
\begin_inset Flex AllCaps
status collapsed

\begin_layout Plain Layout

\lang ngerman
Doktoringenieur (Dr.-Ing.)
\end_layout

\end_inset

, vorgelegt an der 
\begin_inset Flex SmallCaps
status collapsed

\begin_layout Plain Layout

\lang ngerman
Technischen Universität Dresden, Fakultät Informatik
\end_layout

\end_inset

, eingereicht von 
\begin_inset Flex AllCaps
status collapsed

\begin_layout Plain Layout

\lang ngerman
Dipl.-Inf.
 Michael Roitzsch
\end_layout

\end_inset

, geboren am 15.
 August 1980 in Dresden.
\end_layout

\begin_layout Full Width

\lang ngerman
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt" special="@{}l">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Betreuender Hochschullehrer:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Prof.
 Dr.
 rer.
 nat.
 Hermann Härtig,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Technische Universität Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Fachreferent:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Prof.
 Dr.
 Christof Fetzer,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Technische Universität Dresden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Gutachter:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\lang ngerman
fehlt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang ngerman
Tag der Verteidigung:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\lang ngerman
fehlt
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Full Width
\begin_inset VSpace defskip
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset


\lang ngerman
Dresden, 
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\lang ngerman
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Acknowledgments
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
OS group, Prof.
 Härtig, fellow researchers, friends, parents
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList margintable

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Full Width
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
noindent
\backslash
nohyphenation 
\end_layout

\end_inset


\shape italic
\size huge

\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\shape italic
\size huge
Dedication
\end_layout

\end_inset


\end_layout

\begin_layout Full Width
\begin_inset VSpace vfill
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Chapter*
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Itemize
these are hard times for developers
\end_layout

\begin_deeper
\begin_layout Itemize
users demand not only functionality, but are now used to quick responsiveness,
 speedy applications and low energy use
\end_layout

\begin_layout Itemize
these are hard problems:
\end_layout

\begin_deeper
\begin_layout Itemize
responsiveness in the face of non-real-time operating systems
\end_layout

\begin_layout Itemize
speed in the face of stagnating single-core frequency, increasing core counts
 and heterogeneity (GPUs)
\end_layout

\begin_layout Itemize
energy characteristics typically dictated and managed behind the scenes
 by hardware
\end_layout

\end_deeper
\begin_layout Itemize
some of these goals are at odds: speed vs.
 energy, throughput vs.
 responsiveness
\end_layout

\end_deeper
\begin_layout Itemize
large body of research in these individual topics is available
\end_layout

\begin_deeper
\begin_layout Itemize
this dissertation tries to summarize existing work
\end_layout

\begin_layout Itemize
provide a holistic view and enhance state-of-the-art with key contributions
\end_layout

\end_deeper
\begin_layout Itemize
driving insights
\end_layout

\begin_deeper
\begin_layout Itemize
applications are increasingly structured into work packets (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Anatomy"

\end_inset

)
\end_layout

\begin_layout Itemize
some limited help by the application can provide insightful clairvoyance
\end_layout

\begin_layout Itemize
allows ahead-of-time decisions rather than post-mortem control
\end_layout

\end_deeper
\begin_layout Itemize
apply this idea to real-time, parallelism, energy and adaptivity
\end_layout

\begin_deeper
\begin_layout Itemize
work packets help for parallelism
\end_layout

\begin_layout Itemize
deadlines can naturally be assigned to groups of work packets, hints help
 training execution time prediction
\end_layout

\begin_layout Itemize
deadlines also enable batching to save energy
\end_layout

\begin_layout Itemize
adaptation can specify alternative execution paths with costs and benefits
\end_layout

\begin_layout Itemize
implementations in alternative ISAs allow using specialized hardware (GPGPU,
 fixed-function units) with time or energy benefits
\end_layout

\begin_layout Itemize
our focus: combining real-time and parallelism, name contributions here
\end_layout

\begin_layout Itemize
end-to-end-solutions must consider three levels: workload, application,
 system
\end_layout

\begin_deeper
\begin_layout Itemize
collaboration between system and application is beneficial
\end_layout

\begin_layout Itemize
combine application-specific knowledge with general mechanism, not either-or
\end_layout

\begin_layout Itemize
table or summary figure with columns/swim lanes for topics and layers for
 levels
\end_layout

\begin_layout Itemize
provide main thesis statement and clear-cut contributions
\end_layout

\end_deeper
\begin_layout Itemize
overview of the organization of this text (with forward references)
\end_layout

\end_deeper
\begin_layout Itemize
goal: programming paradigm that must be manageable for developers
\end_layout

\begin_deeper
\begin_layout Itemize
mainstream programming for mere mortals instead of only for a priesthood
\end_layout

\begin_layout Itemize
formulate other goals?
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
mainmatter
\backslash
chapteredge
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Anatomy"

\end_inset

Anatomy of a Modern Desktop Application
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Itemize
major change in application structure
\end_layout

\begin_deeper
\begin_layout Itemize
single-threaded
\end_layout

\begin_deeper
\begin_layout Itemize
UI blocks on every user-triggered activity
\end_layout

\begin_layout Itemize
unresponsive, not parallel, but simple code
\end_layout

\end_deeper
\begin_layout Itemize
multithreaded
\end_layout

\begin_deeper
\begin_layout Itemize
focus on responsiveness, do long-running work asynchronously off the UI
 thread
\end_layout

\begin_layout Itemize
threading is not concurrency (Jim Held, MARC symposium keynote), we saw
 that when moving to multicores
\end_layout

\begin_layout Itemize
explicit thread management with hard-coded or guessed thread count
\end_layout

\begin_layout Itemize
difficult code
\end_layout

\end_deeper
\begin_layout Itemize
today: work packets
\end_layout

\begin_deeper
\begin_layout Itemize
the UI thread (main thread) does no real work (see microkernel paradigm),
 it merely dispatches (spine-analogy) to keep things busy
\end_layout

\begin_layout Itemize
analogy: packet-switching in the phone network, railway trains on a track
 network
\begin_inset CommandInset citation
LatexCommand cite
key "MacResearch:AboardGrandCentral"

\end_inset


\end_layout

\begin_layout Itemize
lambdas/closures/blocks/activities as useful abstraction for declaring a
 piece of work inline: code looks serial
\end_layout

\begin_layout Itemize
set down the terminology here: 
\begin_inset Quotes eld
\end_inset

work packets
\begin_inset Quotes erd
\end_inset

 or just 
\begin_inset Quotes eld
\end_inset

work
\begin_inset Quotes erd
\end_inset

 to denote those items of code+state
\end_layout

\begin_layout Itemize
Microsoft: 
\begin_inset Formula $\lambda$
\end_inset

-functions turn out to be the holy-grail feature for developing the parallel
 patters library as a library 
\begin_inset CommandInset citation
LatexCommand cite
key "Sutter:C++AMP_Keynote"

\end_inset


\end_layout

\begin_layout Itemize
work set model
\begin_inset CommandInset citation
LatexCommand cite
key "Kulkarni:Galois"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
executing some work packets can add new work packets to the set
\end_layout

\begin_layout Itemize
useful to implement irregular algorithms (processing on graph-like data
 structures with pointers, opposite: dense array)
\end_layout

\end_deeper
\begin_layout Itemize
work queues keep pending packets, automatic thread assignment and pooling,
 system-wide thread balancing
\end_layout

\begin_layout Itemize
goal: have the number of active threads match the number of (logical) cores
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
result of this architecture: most work is done asynchronously and is announced
 by the application ahead-of-time
\end_layout

\begin_deeper
\begin_layout Itemize
limited view into the future as a common trait for modern applications (this
 is a key point here)
\end_layout

\begin_layout Itemize
work packets (or groups of them) are natural receivers for metadata by the
 developer (deadlines) or automatically by the system (training)
\end_layout

\begin_layout Itemize
this thesis: What kind of metadata can we use to what benefit?
\end_layout

\end_deeper
\begin_layout Itemize
introduce video as the primary demo application
\end_layout

\begin_deeper
\begin_layout Itemize
good sample workload, because it covers many properties: real-time, compute
 intensive, subject to energy savings, potentially adaptive
\end_layout

\begin_layout Itemize
other application to validate claims more comprehensively: simple game like
 
\begin_inset Quotes eld
\end_inset

sheep
\begin_inset Quotes erd
\end_inset

 combining interactivity and autonomous computation
\end_layout

\end_deeper
\begin_layout Itemize
the future: increasing heterogeneity
\end_layout

\begin_deeper
\begin_layout Itemize
only a limited teaser here, do not overload readers, but provide enough
 segue for the later chapters to build upon
\end_layout

\begin_layout Itemize
pieces of GPU code (and other ISAs with tighter assumptions and less ability)
 interwoven with CPU code
\end_layout

\begin_layout Itemize
devices like GPU (and increasingly network cards
\begin_inset CommandInset citation
LatexCommand cite
key "Nightingale:Helios"

\end_inset

) treated as compute resources like CPU, not as a peripheral
\end_layout

\begin_layout Itemize
mostly out of scope for this work, but will consider hardware video decoders
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Real-Time"

\end_inset

Real Simple Real-Time
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Itemize
many applications have intrinsic real-time characteristics
\end_layout

\begin_deeper
\begin_layout Itemize
real-time naturally surfaces when computers interact with the real world,
 in both input and output
\end_layout

\begin_layout Itemize
deadlines for UI code driven by usability requirements: 10/100/1000
\begin_inset space \thinspace{}
\end_inset

ms
\end_layout

\begin_layout Itemize
obvious for animations, which become increasingly ubiquitous and which should
 not stutter if they are supposed to help usability by supporting mental
 transitions
\end_layout

\begin_layout Itemize
even harder for touch-based interaction, where lag of UI breaks the user's
 mental link of interacting with on-screen items directly
\end_layout

\begin_layout Itemize
often buried within the application and not expressed
\end_layout

\end_deeper
\begin_layout Itemize
real-time programming models used to be hard
\end_layout

\begin_deeper
\begin_layout Itemize
complicated contracts to express resource needs (examples needed)
\end_layout

\begin_layout Itemize
admission: yet another error condition for the developer, how to communicate
 refusal to the user?
\end_layout

\end_deeper
\begin_layout Itemize
things should be simplified to become widely accepted by developers
\end_layout

\begin_deeper
\begin_layout Itemize
express requirements with deadlines only
\end_layout

\begin_layout Itemize
this is an attribute within the application's problem domain
\end_layout

\begin_deeper
\begin_layout Itemize
system cannot guess it
\end_layout

\begin_layout Itemize
developers should be able to provide it
\end_layout

\end_deeper
\begin_layout Itemize
no complex contracts, no admission but deal with overload
\end_layout

\end_deeper
\begin_layout Itemize
deriving architecture from requirements
\end_layout

\begin_deeper
\begin_layout Itemize
execution time is workload-dependent, deadlines are application-specific:
 application-view needed
\end_layout

\begin_layout Itemize
scheduling must distribute load (potentially) across all compute resources:
 global view needed
\end_layout

\begin_layout Itemize
application-level component and global scheduler must work together
\end_layout

\end_deeper
\begin_layout Itemize
clairvoyance
\end_layout

\begin_deeper
\begin_layout Itemize
for autonomous computing tasks, applications already know what lies ahead
\end_layout

\begin_deeper
\begin_layout Itemize
only code and data determine the upcoming computation, both are known ahead-of-t
ime
\end_layout

\begin_layout Itemize
counterexample: direct, low-latency reaction to user input
\end_layout

\end_deeper
\begin_layout Itemize
given the asynchronous execution model discussed above, this future execution
 can be exposed as real-time jobs early
\end_layout

\begin_deeper
\begin_layout Itemize
hints are needed to predict execution times
\end_layout

\begin_layout Itemize
must stay within application domain
\end_layout

\begin_layout Itemize
individual work packets may be too fine-grained
\end_layout

\begin_deeper
\begin_layout Itemize
model jobs as groups of work packets
\end_layout

\begin_layout Itemize
attach deadlines there
\end_layout

\begin_layout Itemize
GCD supports those
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
use this knowledge to provide insightful clairvoyance
\end_layout

\begin_layout Itemize
previous work usually depends on black-box guessing and post-mortem control
\end_layout

\begin_deeper
\begin_layout Itemize
state the key advancement here and forward-reference to the full related
 work discussion
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
end-to-end solution
\end_layout

\begin_deeper
\begin_layout Itemize
workload: analyze dependency between data and execution time – execution
 time metrics for video
\begin_inset CommandInset citation
LatexCommand cite
key "roitzsch06:predict"

\end_inset


\end_layout

\begin_layout Itemize
application: derive execution time prediction from hints, attach deadlines
 to jobs, propagate knowledge down to system level
\begin_inset CommandInset citation
LatexCommand cite
key "Krasic:CoopPoll"

\end_inset


\end_layout

\begin_layout Itemize
system: insert all jobs in an EDF run queue
\end_layout

\end_deeper
\begin_layout Itemize
explain online execution time training in detail
\end_layout

\begin_deeper
\begin_layout Itemize
with evaluation
\end_layout

\begin_layout Itemize
G-EDF is optimal for soft real-time
\begin_inset CommandInset citation
LatexCommand cite
key "Devi:GEDFTardiness"

\end_inset


\end_layout

\begin_layout Itemize
useful bounded tardiness characteristics: allows unrealistic deadlines,
 like 0 for low latency 
\begin_inset Quotes eld
\end_inset

right now
\begin_inset Quotes erd
\end_inset

 work
\end_layout

\begin_deeper
\begin_layout Itemize
however: unbounded deadline misses under overload
\end_layout

\end_deeper
\begin_layout Itemize
use infinite deadline for best effort background activity
\end_layout

\begin_layout Itemize
break ties in round-robin fashion
\end_layout

\begin_layout Itemize
G-EDF scales for today's core counts, in the future we may want to consider
 clustered scheduling
\begin_inset CommandInset citation
LatexCommand cite
key "Calandrino:ClusteredEDF"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
discuss related work in detail
\end_layout

\begin_deeper
\begin_layout Itemize
Redline
\begin_inset CommandInset citation
LatexCommand cite
key "Yang:Redline"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Redline Slides"
target "http://os.inf.tu-dresden.de/local/dropscon/archive/2008-12-03-Michael-Redline.pdf"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
two-level scheduling
\begin_inset CommandInset citation
LatexCommand cite
key "Shin:Compositional"

\end_inset


\end_layout

\begin_layout Itemize
ARTIFACT
\begin_inset CommandInset citation
LatexCommand cite
key "Sasinowski:ARTIFACT"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ubiquitous priorities, MPEG execution model hard, load-shedding (forward
 reference to adaptivity)
\end_layout

\end_deeper
\begin_layout Itemize
Constant Bandwidth Server
\begin_inset CommandInset citation
LatexCommand cite
key "Abeni:CBS"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
also employs EDF as the fundamental scheduler
\end_layout

\begin_layout Itemize
provides temporal isolation: protect hard real-time tasks from the messy
 soft real-time tasks
\end_layout

\begin_layout Itemize
server manages the deadlines (assignment, postponing), not the application
\end_layout

\begin_layout Itemize
does not target improving the soft-real time workload, thus somewhat orthogonal
 to this work
\end_layout

\begin_layout Itemize
could be used to provide isolated hard real-time load in our system
\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Parallelism"

\end_inset

Scheduling meets Multicore
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Itemize
trend: context switching considered harmful
\end_layout

\begin_deeper
\begin_layout Itemize
increase efficiency by avoiding mode switches
\end_layout

\begin_layout Itemize
CPUs have always been a special case, many other resources cannot be preempted
\end_layout

\begin_layout Itemize
especially with GPUs: way too much state to save and restore
\end_layout

\begin_layout Itemize
CPUs are going this way too, flushing cache, TLB, branch predictor, prefetcher
 becomes prohibitively expensive
\end_layout

\begin_layout Itemize
HPC applications have always used batch-style operation
\end_layout

\begin_deeper
\begin_layout Itemize
no context switching 
\begin_inset Quotes eld
\end_inset

in the small
\begin_inset Quotes erd
\end_inset

 on one node, because it would throw off barrier-synced code that assumes
 to run ganged
\end_layout

\begin_layout Itemize
no context switching 
\begin_inset Quotes eld
\end_inset

in the big
\begin_inset Quotes erd
\end_inset

 on the entire machine, multiple jobs run concurrently by static assignment
 of nodes
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
work queues that are drained asynchronously fit in here well
\end_layout

\begin_deeper
\begin_layout Itemize
other than with threads, work queues just offer parallelism, dispatching
 is separate, system can decide placement
\end_layout

\begin_deeper
\begin_layout Itemize
careful: there is also user-level threading, but this again has the context-swit
ch problem, just on another level
\end_layout

\end_deeper
\begin_layout Itemize
used within applications and also down to the kernel
\begin_inset CommandInset citation
LatexCommand cite
key "Soares:FlexSC"

\end_inset


\end_layout

\begin_layout Itemize
work queues also used to drive GPUs predictably
\begin_inset CommandInset citation
LatexCommand cite
key "Kato:Timegraph"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
combination of both the above: systems increasingly schedule in space instead
 of time
\end_layout

\begin_deeper
\begin_layout Itemize
Lampson predicted this
\begin_inset CommandInset citation
LatexCommand cite
key "Lampson:HintsDesign"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

split resources in a fixed way if in doubt, rather than sharing them
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
multiplex as long as hardware is expensive, statically assign once hardware
 is cheap
\end_layout

\end_deeper
\begin_layout Itemize
specialize cores dynamically to execute kernel services
\end_layout

\begin_layout Itemize
run parts of the system close or on the device they target
\begin_inset CommandInset citation
LatexCommand cite
key "Nightingale:Helios"

\end_inset


\end_layout

\begin_layout Itemize
placement and migration replace context switching as the scheduling mechanism
\end_layout

\end_deeper
\begin_layout Itemize
real-time section covered time dimension, now look at space dimension
\end_layout

\begin_deeper
\begin_layout Itemize
using asynchronous blocks for parallelism and deadlines and hints attached
 to block groups for real-time, both are decoupled
\end_layout

\begin_layout Itemize
increasing message latency (relative to compute speed) between cores: placement
 of work relevant
\end_layout

\begin_layout Itemize
assume that work packets of the same job are more likely to talk to each
 other, place closer together, more advanced: MOSIX
\end_layout

\end_deeper
\begin_layout Itemize
end-to-end solution
\end_layout

\begin_deeper
\begin_layout Itemize
workload: make amenable for data-parallel processing like intrinsic load-balanci
ng
\begin_inset CommandInset citation
LatexCommand cite
key "roitzsch07:balancing"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
example of a dynamic HPC load: particle system, work packets correspond
 to patches of physical space, number of particles currently in the patch
 determines amount of work
\end_layout

\begin_layout Itemize
discuss related work in detail
\end_layout

\begin_deeper
\begin_layout Itemize
the execution order of work packets within a job is relevant for speed and
 cache working set size
\begin_inset CommandInset citation
LatexCommand cite
key "Chen:ConstructiveCacheSharing"

\end_inset


\end_layout

\begin_layout Itemize
use a lightweight specification language to describe beneficial scheduling
 policies
\begin_inset CommandInset citation
LatexCommand cite
key "Nguyen:ConcurrentSchedulers"

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Adaptivity-Energy"

\end_inset

Adapting and Saving Energy
\begin_inset Note Note
status open

\begin_layout Plain Layout
with a different title, this chapter can (and should?) double as the conclusion,
 maybe use the 
\begin_inset Quotes eld
\end_inset

handling over-/underload
\begin_inset Quotes erd
\end_inset

 aspect
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Itemize
some work just needs to be done, no discussion, no adaptation possible
\end_layout

\begin_deeper
\begin_layout Itemize
I would argue this is the common case
\end_layout

\begin_layout Itemize
we can only hope to save energy by using the most efficient compute resource
 and organize it the most efficient way
\end_layout

\begin_layout Itemize
choosing between race-to-halt and slowdown depends on workload and platform
\begin_inset CommandInset citation
LatexCommand cite
key "LeSueur:SlowDownSleep"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
we may have targeted hardware with reduced instruction sets available that
 is more energy-efficient
\end_layout

\begin_deeper
\begin_layout Itemize
hardware video decoders are an edge-case of this spectrum: very limited
 instructions or fixed function
\end_layout

\begin_layout Itemize
saves some energy (up to 25%
\begin_inset CommandInset citation
LatexCommand cite
key "LeSueur:SlowDownSleep"

\end_inset

), but not game-changing savings
\end_layout

\begin_layout Itemize
treat as any coprocessor that work with tighter restrictions on the available
 instructions can be offloaded to (see 
\family typewriter
restrict
\family default
 keyword proposal
\begin_inset CommandInset citation
LatexCommand cite
key "Sutter:C++AMP_Keynote"

\end_inset

)
\end_layout

\begin_layout Itemize
special-purpose devices offer more choice for job placement and change energy
 tradeoffs, but they do not eliminate the fundamental problem to get given
 work done (meeting given deadlines) with as little resources (energy, time)
 as possible
\end_layout

\end_deeper
\begin_layout Itemize
metadata to decide energy consequences can be collected per-job at runtime
\end_layout

\begin_deeper
\begin_layout Itemize
energy counter in Intel Sandy Bridge CPUs
\end_layout

\begin_layout Itemize
performance counter can help to tell memory- and CPU-bound jobs apart
\end_layout

\begin_layout Itemize
clocking down the CPU especially helpful for memory-bound jobs
\begin_inset CommandInset citation
LatexCommand cite
key "Snowdon:Koala"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
some applications can adapt their energy or computation time needs
\begin_inset CommandInset citation
LatexCommand cite
key "Flinn:EnergyAdaptation"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
some trivial examples (disable backup on low battery) are rather obvious
 and not interesting, more dynamic examples are rare
\end_layout

\begin_layout Itemize
video can be one of them, if the bitstream allows it
\end_layout

\begin_layout Itemize
load shedding is an old concept
\begin_inset CommandInset citation
LatexCommand cite
key "Lampson:HintsDesign"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shed load to control demand, rather than allowing the system to become overloade
d.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Robert Morris idea: red button next to terminal, push when dissatisfied,
 system must raise your QoS or throw you off
\end_layout

\begin_layout Itemize
this old idea already argued for quality-aware adaptation, not just load-aware
\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
backmatter
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
setlength{
\backslash
labelwidth}{0mm}
\backslash
setlength{
\backslash
labelsep}{0mm} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Bibliography/Thesis,Bibliography/Master"
options "Bibliography/Thesis"

\end_inset


\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
